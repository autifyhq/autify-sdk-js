/* tslint:disable */
/* eslint-disable */
/**
 * Autify API
 * ## Authorization You can authenticate the API by using a personal access token and passing it to the Bearer header. To generate or manage API keys、please visit [your account page](https://app.autify.com/settings).  If the credentials are invalid or omitted, an error message is returned with status code 401： ``` {   \"errors\":[{     \"message\": \"Bad credentials\"   }] } ```
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from "url";
import FormData from "form-data";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface AccessPoint
 */
export interface AccessPoint {
  /**
   *
   * @type {string}
   * @memberof AccessPoint
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof AccessPoint
   */
  last_use?: string;
  /**
   *
   * @type {string}
   * @memberof AccessPoint
   */
  creator: string;
  /**
   *
   * @type {string}
   * @memberof AccessPoint
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof AccessPoint
   */
  updated_at: string;
}
/**
 *
 * @export
 * @interface Capability
 */
export interface Capability {
  /**
   *
   * @type {number}
   * @memberof Capability
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Capability
   */
  os?: string;
  /**
   *
   * @type {string}
   * @memberof Capability
   */
  os_version?: string;
  /**
   *
   * @type {string}
   * @memberof Capability
   */
  browser?: string;
  /**
   *
   * @type {string}
   * @memberof Capability
   */
  browser_version?: string;
  /**
   *
   * @type {string}
   * @memberof Capability
   */
  device?: string;
  /**
   *
   * @type {string}
   * @memberof Capability
   */
  resolution?: string;
  /**
   *
   * @type {string}
   * @memberof Capability
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof Capability
   */
  updated_at?: string;
}
/**
 *
 * @export
 * @interface CapabilityOption
 */
export interface CapabilityOption {
  /**
   *
   * @type {string}
   * @memberof CapabilityOption
   */
  os?: string;
  /**
   *
   * @type {string}
   * @memberof CapabilityOption
   */
  os_version?: string;
  /**
   *
   * @type {string}
   * @memberof CapabilityOption
   */
  browser?: string;
  /**
   *
   * @type {string}
   * @memberof CapabilityOption
   */
  browser_version?: string;
  /**
   *
   * @type {string}
   * @memberof CapabilityOption
   */
  device?: string;
  /**
   *
   * @type {string}
   * @memberof CapabilityOption
   */
  device_type?: string;
  /**
   *
   * @type {boolean}
   * @memberof CapabilityOption
   */
  unsupported?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CapabilityOption
   */
  no_new_registration?: boolean;
}
/**
 *
 * @export
 * @interface CreateAccessPoint400Response
 */
export interface CreateAccessPoint400Response {
  /**
   *
   * @type {Array<CreateAccessPoint400ResponseErrorsInner>}
   * @memberof CreateAccessPoint400Response
   */
  errors?: Array<CreateAccessPoint400ResponseErrorsInner>;
}
/**
 *
 * @export
 * @interface CreateAccessPoint400ResponseErrorsInner
 */
export interface CreateAccessPoint400ResponseErrorsInner {
  /**
   *
   * @type {number}
   * @memberof CreateAccessPoint400ResponseErrorsInner
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof CreateAccessPoint400ResponseErrorsInner
   */
  message?: string;
}
/**
 *
 * @export
 * @interface CreateAccessPointRequest
 */
export interface CreateAccessPointRequest {
  /**
   * Name of the access point to be created
   * @type {string}
   * @memberof CreateAccessPointRequest
   */
  name: string;
}
/**
 *
 * @export
 * @interface CreateAccessPointResult
 */
export interface CreateAccessPointResult {
  /**
   *
   * @type {string}
   * @memberof CreateAccessPointResult
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateAccessPointResult
   */
  key: string;
  /**
   *
   * @type {string}
   * @memberof CreateAccessPointResult
   */
  creator: string;
  /**
   *
   * @type {string}
   * @memberof CreateAccessPointResult
   */
  last_use?: string;
  /**
   *
   * @type {string}
   * @memberof CreateAccessPointResult
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof CreateAccessPointResult
   */
  updated_at?: string;
}
/**
 *
 * @export
 * @interface CreateUrlReplacementRequest
 */
export interface CreateUrlReplacementRequest {
  /**
   *
   * @type {string}
   * @memberof CreateUrlReplacementRequest
   */
  pattern_url: string;
  /**
   *
   * @type {string}
   * @memberof CreateUrlReplacementRequest
   */
  replacement_url: string;
}
/**
 *
 * @export
 * @interface DeleteAccessPoint404Response
 */
export interface DeleteAccessPoint404Response {
  /**
   *
   * @type {Array<DeleteAccessPoint404ResponseErrorsInner>}
   * @memberof DeleteAccessPoint404Response
   */
  errors?: Array<DeleteAccessPoint404ResponseErrorsInner>;
}
/**
 *
 * @export
 * @interface DeleteAccessPoint404ResponseErrorsInner
 */
export interface DeleteAccessPoint404ResponseErrorsInner {
  /**
   *
   * @type {number}
   * @memberof DeleteAccessPoint404ResponseErrorsInner
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof DeleteAccessPoint404ResponseErrorsInner
   */
  message?: string;
}
/**
 *
 * @export
 * @interface DeleteAccessPointRequest
 */
export interface DeleteAccessPointRequest {
  /**
   * Name of the access point to be deleted
   * @type {string}
   * @memberof DeleteAccessPointRequest
   */
  name: string;
}
/**
 *
 * @export
 * @interface DescribeResult200Response
 */
export interface DescribeResult200Response {
  /**
   *
   * @type {number}
   * @memberof DescribeResult200Response
   */
  id?: number;
  /**
   *
   * @type {TestPlanResultStatus}
   * @memberof DescribeResult200Response
   */
  status?: TestPlanResultStatus;
  /**
   *
   * @type {number}
   * @memberof DescribeResult200Response
   */
  duration?: number;
  /**
   *
   * @type {string}
   * @memberof DescribeResult200Response
   */
  started_at?: string;
  /**
   *
   * @type {string}
   * @memberof DescribeResult200Response
   */
  finished_at?: string;
  /**
   *
   * @type {string}
   * @memberof DescribeResult200Response
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof DescribeResult200Response
   */
  updated_at?: string;
  /**
   *
   * @type {boolean}
   * @memberof DescribeResult200Response
   */
  review_needed?: boolean;
  /**
   *
   * @type {Array<TestPlanCapabilityResult>}
   * @memberof DescribeResult200Response
   */
  test_plan_capability_results?: Array<TestPlanCapabilityResult>;
  /**
   *
   * @type {TestPlan}
   * @memberof DescribeResult200Response
   */
  test_plan?: TestPlan | null;
}
/**
 *
 * @export
 * @interface ExecuteScenarios401Response
 */
export interface ExecuteScenarios401Response {
  /**
   *
   * @type {Array<ExecuteScenarios401ResponseErrorsInner>}
   * @memberof ExecuteScenarios401Response
   */
  errors?: Array<ExecuteScenarios401ResponseErrorsInner>;
}
/**
 *
 * @export
 * @interface ExecuteScenarios401ResponseErrorsInner
 */
export interface ExecuteScenarios401ResponseErrorsInner {
  /**
   *
   * @type {number}
   * @memberof ExecuteScenarios401ResponseErrorsInner
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof ExecuteScenarios401ResponseErrorsInner
   */
  message?: string;
}
/**
 *
 * @export
 * @interface ExecuteScenarios404Response
 */
export interface ExecuteScenarios404Response {
  /**
   *
   * @type {Array<ExecuteScenarios404ResponseErrorsInner>}
   * @memberof ExecuteScenarios404Response
   */
  errors?: Array<ExecuteScenarios404ResponseErrorsInner>;
}
/**
 *
 * @export
 * @interface ExecuteScenarios404ResponseErrorsInner
 */
export interface ExecuteScenarios404ResponseErrorsInner {
  /**
   *
   * @type {number}
   * @memberof ExecuteScenarios404ResponseErrorsInner
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof ExecuteScenarios404ResponseErrorsInner
   */
  message?: string;
}
/**
 *
 * @export
 * @interface ExecuteScenariosRequest
 */
export interface ExecuteScenariosRequest {
  /**
   * Defaults to \"API execution {{time_at(Time.now, organization.timezone)}}\"
   * @type {string}
   * @memberof ExecuteScenariosRequest
   */
  name?: string;
  /**
   * Defaults to \"parallel\" (\"sequential\" In case parallel execution was disabled in the workspace)
   * @type {string}
   * @memberof ExecuteScenariosRequest
   */
  execution_type?: ExecuteScenariosRequestExecutionTypeEnum;
  /**
   *
   * @type {Array<ExecuteScenariosRequestCapabilitiesInner>}
   * @memberof ExecuteScenariosRequest
   */
  capabilities: Array<ExecuteScenariosRequestCapabilitiesInner>;
  /**
   *
   * @type {Array<CreateUrlReplacementRequest>}
   * @memberof ExecuteScenariosRequest
   */
  url_replacements?: Array<CreateUrlReplacementRequest>;
  /**
   *
   * @type {Array<ExecuteScenariosRequestScenariosInner>}
   * @memberof ExecuteScenariosRequest
   */
  scenarios: Array<ExecuteScenariosRequestScenariosInner>;
  /**
   *
   * @type {ExecuteScenariosRequestAutifyConnect}
   * @memberof ExecuteScenariosRequest
   */
  autify_connect?: ExecuteScenariosRequestAutifyConnect;
}

export const ExecuteScenariosRequestExecutionTypeEnum = {
  Parallel: "parallel",
  Sequential: "sequential",
} as const;

export type ExecuteScenariosRequestExecutionTypeEnum =
  (typeof ExecuteScenariosRequestExecutionTypeEnum)[keyof typeof ExecuteScenariosRequestExecutionTypeEnum];

/**
 *
 * @export
 * @interface ExecuteScenariosRequestAutifyConnect
 */
export interface ExecuteScenariosRequestAutifyConnect {
  /**
   *
   * @type {string}
   * @memberof ExecuteScenariosRequestAutifyConnect
   */
  name: string;
}
/**
 *
 * @export
 * @interface ExecuteScenariosRequestCapabilitiesInner
 */
export interface ExecuteScenariosRequestCapabilitiesInner {
  /**
   *
   * @type {string}
   * @memberof ExecuteScenariosRequestCapabilitiesInner
   */
  os?: string;
  /**
   *
   * @type {string}
   * @memberof ExecuteScenariosRequestCapabilitiesInner
   */
  os_version?: string;
  /**
   *
   * @type {string}
   * @memberof ExecuteScenariosRequestCapabilitiesInner
   */
  device?: string;
  /**
   *
   * @type {string}
   * @memberof ExecuteScenariosRequestCapabilitiesInner
   */
  device_type?: string;
  /**
   *
   * @type {string}
   * @memberof ExecuteScenariosRequestCapabilitiesInner
   */
  browser?: string;
  /**
   *
   * @type {string}
   * @memberof ExecuteScenariosRequestCapabilitiesInner
   */
  browser_version?: string;
}
/**
 *
 * @export
 * @interface ExecuteScenariosRequestScenariosInner
 */
export interface ExecuteScenariosRequestScenariosInner {
  /**
   *
   * @type {number}
   * @memberof ExecuteScenariosRequestScenariosInner
   */
  id: number;
}
/**
 *
 * @export
 * @interface ExecuteScenariosResult
 */
export interface ExecuteScenariosResult {
  /**
   *
   * @type {number}
   * @memberof ExecuteScenariosResult
   */
  result_id: number;
}
/**
 *
 * @export
 * @interface ExecuteSchedule200Response
 */
export interface ExecuteSchedule200Response {
  /**
   *
   * @type {ExecuteSchedule200ResponseData}
   * @memberof ExecuteSchedule200Response
   */
  data: ExecuteSchedule200ResponseData;
}
/**
 *
 * @export
 * @interface ExecuteSchedule200ResponseData
 */
export interface ExecuteSchedule200ResponseData {
  /**
   *
   * @type {number}
   * @memberof ExecuteSchedule200ResponseData
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof ExecuteSchedule200ResponseData
   */
  type: string;
  /**
   *
   * @type {ExecuteSchedule200ResponseDataAttributes}
   * @memberof ExecuteSchedule200ResponseData
   */
  attributes: ExecuteSchedule200ResponseDataAttributes;
}
/**
 *
 * @export
 * @interface ExecuteSchedule200ResponseDataAttributes
 */
export interface ExecuteSchedule200ResponseDataAttributes {
  /**
   *
   * @type {number}
   * @memberof ExecuteSchedule200ResponseDataAttributes
   */
  id?: number;
}
/**
 *
 * @export
 * @interface ExecuteSchedule401Response
 */
export interface ExecuteSchedule401Response {
  /**
   *
   * @type {Array<ExecuteSchedule401ResponseErrorsInner>}
   * @memberof ExecuteSchedule401Response
   */
  errors?: Array<ExecuteSchedule401ResponseErrorsInner>;
}
/**
 *
 * @export
 * @interface ExecuteSchedule401ResponseErrorsInner
 */
export interface ExecuteSchedule401ResponseErrorsInner {
  /**
   *
   * @type {string}
   * @memberof ExecuteSchedule401ResponseErrorsInner
   */
  message?: string;
}
/**
 *
 * @export
 * @interface ExecuteSchedule404Response
 */
export interface ExecuteSchedule404Response {
  /**
   *
   * @type {Array<ExecuteSchedule404ResponseErrorsInner>}
   * @memberof ExecuteSchedule404Response
   */
  errors?: Array<ExecuteSchedule404ResponseErrorsInner>;
}
/**
 *
 * @export
 * @interface ExecuteSchedule404ResponseErrorsInner
 */
export interface ExecuteSchedule404ResponseErrorsInner {
  /**
   *
   * @type {string}
   * @memberof ExecuteSchedule404ResponseErrorsInner
   */
  message?: string;
}
/**
 *
 * @export
 * @interface ExecuteScheduleRequest
 */
export interface ExecuteScheduleRequest {
  /**
   *
   * @type {ExecuteScheduleRequestAutifyConnect}
   * @memberof ExecuteScheduleRequest
   */
  autify_connect?: ExecuteScheduleRequestAutifyConnect;
}
/**
 *
 * @export
 * @interface ExecuteScheduleRequestAutifyConnect
 */
export interface ExecuteScheduleRequestAutifyConnect {
  /**
   * The name of access point to override the original settings. When null is given, the test_plan will run without Autify Connect.
   * @type {string}
   * @memberof ExecuteScheduleRequestAutifyConnect
   */
  name: string | null;
}
/**
 *
 * @export
 * @interface Label
 */
export interface Label {
  /**
   *
   * @type {number}
   * @memberof Label
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Label
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Label
   */
  color?: string;
  /**
   *
   * @type {string}
   * @memberof Label
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof Label
   */
  updated_at?: string;
}
/**
 *
 * @export
 * @interface Scenario
 */
export interface Scenario {
  /**
   *
   * @type {number}
   * @memberof Scenario
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Scenario
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Scenario
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof Scenario
   */
  updated_at?: string;
  /**
   *
   * @type {Array<Label>}
   * @memberof Scenario
   */
  labels?: Array<Label>;
}
/**
 *
 * @export
 * @interface TestCaseResult
 */
export interface TestCaseResult {
  /**
   *
   * @type {number}
   * @memberof TestCaseResult
   */
  id?: number;
  /**
   *
   * @type {TestCaseResultStatus}
   * @memberof TestCaseResult
   */
  status?: TestCaseResultStatus;
  /**
   *
   * @type {number}
   * @memberof TestCaseResult
   */
  duration?: number;
  /**
   *
   * @type {string}
   * @memberof TestCaseResult
   */
  started_at?: string;
  /**
   *
   * @type {string}
   * @memberof TestCaseResult
   */
  finished_at?: string;
  /**
   *
   * @type {string}
   * @memberof TestCaseResult
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof TestCaseResult
   */
  updated_at?: string;
  /**
   * ID of the scenario executed.
   * @type {number}
   * @memberof TestCaseResult
   */
  test_case_id?: number;
  /**
   *
   * @type {string}
   * @memberof TestCaseResult
   */
  project_url?: string;
  /**
   * Number of \"Review needed\" flags present in the test results.
   * @type {number}
   * @memberof TestCaseResult
   */
  review_needed?: number;
  /**
   * THIS FEATURE IS FOR LIMITED NUMBER OF CUSTOMERS. Variables imported from previously executed test results in a test plan.
   * @type {Array<TestCaseResultImportVariablesInner>}
   * @memberof TestCaseResult
   */
  import_variables?: Array<TestCaseResultImportVariablesInner>;
  /**
   * THIS FEATURE IS FOR LIMITED NUMBER OF CUSTOMERS. Variables exported from this test result.
   * @type {Array<TestCaseResultExportVariablesInner>}
   * @memberof TestCaseResult
   */
  export_variables?: Array<TestCaseResultExportVariablesInner>;
}
/**
 *
 * @export
 * @interface TestCaseResultExportVariablesInner
 */
export interface TestCaseResultExportVariablesInner {
  /**
   *
   * @type {string}
   * @memberof TestCaseResultExportVariablesInner
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof TestCaseResultExportVariablesInner
   */
  value?: string;
}
/**
 *
 * @export
 * @interface TestCaseResultImportVariablesInner
 */
export interface TestCaseResultImportVariablesInner {
  /**
   *
   * @type {string}
   * @memberof TestCaseResultImportVariablesInner
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof TestCaseResultImportVariablesInner
   */
  value?: string;
  /**
   *
   * @type {TestCaseResultImportVariablesInnerSetBy}
   * @memberof TestCaseResultImportVariablesInner
   */
  set_by?: TestCaseResultImportVariablesInnerSetBy;
}
/**
 *
 * @export
 * @interface TestCaseResultImportVariablesInnerSetBy
 */
export interface TestCaseResultImportVariablesInnerSetBy {
  /**
   *
   * @type {string}
   * @memberof TestCaseResultImportVariablesInnerSetBy
   */
  type?: string;
  /**
   *
   * @type {number}
   * @memberof TestCaseResultImportVariablesInnerSetBy
   */
  id?: number;
}
/**
 *
 * @export
 * @enum {string}
 */

export const TestCaseResultStatus = {
  Waiting: "waiting",
  Running: "running",
  Passed: "passed",
  Failed: "failed",
  Skipped: "skipped",
  InternalError: "internal_error",
  Canceled: "canceled",
} as const;

export type TestCaseResultStatus =
  (typeof TestCaseResultStatus)[keyof typeof TestCaseResultStatus];

/**
 *
 * @export
 * @interface TestPlan
 */
export interface TestPlan {
  /**
   *
   * @type {number}
   * @memberof TestPlan
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof TestPlan
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof TestPlan
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof TestPlan
   */
  updated_at?: string;
}
/**
 *
 * @export
 * @interface TestPlanCapabilityResult
 */
export interface TestPlanCapabilityResult {
  /**
   *
   * @type {number}
   * @memberof TestPlanCapabilityResult
   */
  id?: number;
  /**
   *
   * @type {Capability}
   * @memberof TestPlanCapabilityResult
   */
  capability?: Capability;
  /**
   *
   * @type {Array<TestCaseResult>}
   * @memberof TestPlanCapabilityResult
   */
  test_case_results?: Array<TestCaseResult>;
}
/**
 *
 * @export
 * @interface TestPlanResult
 */
export interface TestPlanResult {
  /**
   *
   * @type {number}
   * @memberof TestPlanResult
   */
  id?: number;
  /**
   *
   * @type {TestPlanResultStatus}
   * @memberof TestPlanResult
   */
  status?: TestPlanResultStatus;
  /**
   *
   * @type {number}
   * @memberof TestPlanResult
   */
  duration?: number;
  /**
   *
   * @type {string}
   * @memberof TestPlanResult
   */
  started_at?: string;
  /**
   *
   * @type {string}
   * @memberof TestPlanResult
   */
  finished_at?: string;
  /**
   *
   * @type {string}
   * @memberof TestPlanResult
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof TestPlanResult
   */
  updated_at?: string;
  /**
   *
   * @type {boolean}
   * @memberof TestPlanResult
   */
  review_needed?: boolean;
  /**
   *
   * @type {TestPlan}
   * @memberof TestPlanResult
   */
  test_plan?: TestPlan | null;
}
/**
 *
 * @export
 * @enum {string}
 */

export const TestPlanResultStatus = {
  Queuing: "queuing",
  Waiting: "waiting",
  Running: "running",
  Passed: "passed",
  Failed: "failed",
  Skipped: "skipped",
  InternalError: "internal_error",
  Canceled: "canceled",
} as const;

export type TestPlanResultStatus =
  (typeof TestPlanResultStatus)[keyof typeof TestPlanResultStatus];

/**
 *
 * @export
 * @interface UpdateUrlReplacementRequest
 */
export interface UpdateUrlReplacementRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateUrlReplacementRequest
   */
  pattern_url?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateUrlReplacementRequest
   */
  replacement_url?: string;
}
/**
 *
 * @export
 * @interface UrlReplacement
 */
export interface UrlReplacement {
  /**
   *
   * @type {number}
   * @memberof UrlReplacement
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof UrlReplacement
   */
  test_plan_id: number;
  /**
   *
   * @type {string}
   * @memberof UrlReplacement
   */
  pattern_url: string;
  /**
   *
   * @type {string}
   * @memberof UrlReplacement
   */
  replacement_url: string;
  /**
   *
   * @type {string}
   * @memberof UrlReplacement
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof UrlReplacement
   */
  updated_at: string;
}

/**
 * AutifyConnectApi - axios parameter creator
 * @export
 */
export const AutifyConnectApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * You can generate a new access point by passing in its name.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
     * @param {CreateAccessPointRequest} createAccessPointRequest The name of the access point to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccessPoint: async (
      projectId: number,
      createAccessPointRequest: CreateAccessPointRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("createAccessPoint", "projectId", projectId);
      // verify required parameter 'createAccessPointRequest' is not null or undefined
      assertParamExists(
        "createAccessPoint",
        "createAccessPointRequest",
        createAccessPointRequest
      );
      const localVarPath =
        `/projects/{project_id}/autify_connect/access_points`.replace(
          `{${"project_id"}}`,
          encodeURIComponent(String(projectId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createAccessPointRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * You can delete an access point by passing in its name.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
     * @param {DeleteAccessPointRequest} deleteAccessPointRequest The name of the access point to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessPoint: async (
      projectId: number,
      deleteAccessPointRequest: DeleteAccessPointRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("deleteAccessPoint", "projectId", projectId);
      // verify required parameter 'deleteAccessPointRequest' is not null or undefined
      assertParamExists(
        "deleteAccessPoint",
        "deleteAccessPointRequest",
        deleteAccessPointRequest
      );
      const localVarPath =
        `/projects/{project_id}/autify_connect/access_points`.replace(
          `{${"project_id"}}`,
          encodeURIComponent(String(projectId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteAccessPointRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List access points for the project.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
     * @param {number} [page] The number of page returns.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccessPoints: async (
      projectId: number,
      page?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("listAccessPoints", "projectId", projectId);
      const localVarPath =
        `/projects/{project_id}/autify_connect/access_points`.replace(
          `{${"project_id"}}`,
          encodeURIComponent(String(projectId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AutifyConnectApi - functional programming interface
 * @export
 */
export const AutifyConnectApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AutifyConnectApiAxiosParamCreator(configuration);
  return {
    /**
     * You can generate a new access point by passing in its name.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
     * @param {CreateAccessPointRequest} createAccessPointRequest The name of the access point to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAccessPoint(
      projectId: number,
      createAccessPointRequest: CreateAccessPointRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreateAccessPointResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createAccessPoint(
          projectId,
          createAccessPointRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * You can delete an access point by passing in its name.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
     * @param {DeleteAccessPointRequest} deleteAccessPointRequest The name of the access point to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAccessPoint(
      projectId: number,
      deleteAccessPointRequest: DeleteAccessPointRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteAccessPoint(
          projectId,
          deleteAccessPointRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * List access points for the project.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
     * @param {number} [page] The number of page returns.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listAccessPoints(
      projectId: number,
      page?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<AccessPoint>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listAccessPoints(
          projectId,
          page,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * AutifyConnectApi - factory interface
 * @export
 */
export const AutifyConnectApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AutifyConnectApiFp(configuration);
  return {
    /**
     * You can generate a new access point by passing in its name.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
     * @param {CreateAccessPointRequest} createAccessPointRequest The name of the access point to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccessPoint(
      projectId: number,
      createAccessPointRequest: CreateAccessPointRequest,
      options?: any
    ): AxiosPromise<CreateAccessPointResult> {
      return localVarFp
        .createAccessPoint(projectId, createAccessPointRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * You can delete an access point by passing in its name.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
     * @param {DeleteAccessPointRequest} deleteAccessPointRequest The name of the access point to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessPoint(
      projectId: number,
      deleteAccessPointRequest: DeleteAccessPointRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .deleteAccessPoint(projectId, deleteAccessPointRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List access points for the project.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
     * @param {number} [page] The number of page returns.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccessPoints(
      projectId: number,
      page?: number,
      options?: any
    ): AxiosPromise<Array<AccessPoint>> {
      return localVarFp
        .listAccessPoints(projectId, page, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AutifyConnectApi - object-oriented interface
 * @export
 * @class AutifyConnectApi
 * @extends {BaseAPI}
 */
export class AutifyConnectApi extends BaseAPI {
  /**
   * You can generate a new access point by passing in its name.
   * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
   * @param {CreateAccessPointRequest} createAccessPointRequest The name of the access point to be created
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AutifyConnectApi
   */
  public createAccessPoint(
    projectId: number,
    createAccessPointRequest: CreateAccessPointRequest,
    options?: AxiosRequestConfig
  ) {
    return AutifyConnectApiFp(this.configuration)
      .createAccessPoint(projectId, createAccessPointRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * You can delete an access point by passing in its name.
   * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
   * @param {DeleteAccessPointRequest} deleteAccessPointRequest The name of the access point to be deleted
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AutifyConnectApi
   */
  public deleteAccessPoint(
    projectId: number,
    deleteAccessPointRequest: DeleteAccessPointRequest,
    options?: AxiosRequestConfig
  ) {
    return AutifyConnectApiFp(this.configuration)
      .deleteAccessPoint(projectId, deleteAccessPointRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * List access points for the project.
   * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
   * @param {number} [page] The number of page returns.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AutifyConnectApi
   */
  public listAccessPoints(
    projectId: number,
    page?: number,
    options?: AxiosRequestConfig
  ) {
    return AutifyConnectApiFp(this.configuration)
      .listAccessPoints(projectId, page, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CapabilityApi - axios parameter creator
 * @export
 */
export const CapabilityApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * List available Capabilities.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/capabilities
     * @param {string} [os] os name to filter
     * @param {string} [browser] browser name to filter
     * @param {string} [deviceType] device_type name to filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCapabilities: async (
      projectId: number,
      os?: string,
      browser?: string,
      deviceType?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("listCapabilities", "projectId", projectId);
      const localVarPath = `/projects/{project_id}/capabilities`.replace(
        `{${"project_id"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (os !== undefined) {
        localVarQueryParameter["os"] = os;
      }

      if (browser !== undefined) {
        localVarQueryParameter["browser"] = browser;
      }

      if (deviceType !== undefined) {
        localVarQueryParameter["device_type"] = deviceType;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CapabilityApi - functional programming interface
 * @export
 */
export const CapabilityApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    CapabilityApiAxiosParamCreator(configuration);
  return {
    /**
     * List available Capabilities.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/capabilities
     * @param {string} [os] os name to filter
     * @param {string} [browser] browser name to filter
     * @param {string} [deviceType] device_type name to filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listCapabilities(
      projectId: number,
      os?: string,
      browser?: string,
      deviceType?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<CapabilityOption>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listCapabilities(
          projectId,
          os,
          browser,
          deviceType,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * CapabilityApi - factory interface
 * @export
 */
export const CapabilityApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CapabilityApiFp(configuration);
  return {
    /**
     * List available Capabilities.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/capabilities
     * @param {string} [os] os name to filter
     * @param {string} [browser] browser name to filter
     * @param {string} [deviceType] device_type name to filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCapabilities(
      projectId: number,
      os?: string,
      browser?: string,
      deviceType?: string,
      options?: any
    ): AxiosPromise<Array<CapabilityOption>> {
      return localVarFp
        .listCapabilities(projectId, os, browser, deviceType, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CapabilityApi - object-oriented interface
 * @export
 * @class CapabilityApi
 * @extends {BaseAPI}
 */
export class CapabilityApi extends BaseAPI {
  /**
   * List available Capabilities.
   * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/capabilities
   * @param {string} [os] os name to filter
   * @param {string} [browser] browser name to filter
   * @param {string} [deviceType] device_type name to filter
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CapabilityApi
   */
  public listCapabilities(
    projectId: number,
    os?: string,
    browser?: string,
    deviceType?: string,
    options?: AxiosRequestConfig
  ) {
    return CapabilityApiFp(this.configuration)
      .listCapabilities(projectId, os, browser, deviceType, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ResultApi - axios parameter creator
 * @export
 */
export const ResultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Get a test result.
     * @summary Get a test result.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/results/4
     * @param {number} resultId For example, 4 for the following URL: https://app.autify.com/projects/1/results/4
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    describeResult: async (
      projectId: number,
      resultId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("describeResult", "projectId", projectId);
      // verify required parameter 'resultId' is not null or undefined
      assertParamExists("describeResult", "resultId", resultId);
      const localVarPath = `/projects/{project_id}/results/{result_id}`
        .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"result_id"}}`, encodeURIComponent(String(resultId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List test results.
     * @summary List test results.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/results
     * @param {number} [page] The number of page returns.
     * @param {number} [perPage] The number of items returns. Default number is 30 and up to a maximum of 100
     * @param {number} [testPlanId] Test plan ID used to filter results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResults: async (
      projectId: number,
      page?: number,
      perPage?: number,
      testPlanId?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("listResults", "projectId", projectId);
      const localVarPath = `/projects/{project_id}/results`.replace(
        `{${"project_id"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      if (testPlanId !== undefined) {
        localVarQueryParameter["test_plan_id"] = testPlanId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ResultApi - functional programming interface
 * @export
 */
export const ResultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ResultApiAxiosParamCreator(configuration);
  return {
    /**
     * Get a test result.
     * @summary Get a test result.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/results/4
     * @param {number} resultId For example, 4 for the following URL: https://app.autify.com/projects/1/results/4
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async describeResult(
      projectId: number,
      resultId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DescribeResult200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.describeResult(
        projectId,
        resultId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * List test results.
     * @summary List test results.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/results
     * @param {number} [page] The number of page returns.
     * @param {number} [perPage] The number of items returns. Default number is 30 and up to a maximum of 100
     * @param {number} [testPlanId] Test plan ID used to filter results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listResults(
      projectId: number,
      page?: number,
      perPage?: number,
      testPlanId?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<TestPlanResult>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listResults(
        projectId,
        page,
        perPage,
        testPlanId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ResultApi - factory interface
 * @export
 */
export const ResultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ResultApiFp(configuration);
  return {
    /**
     * Get a test result.
     * @summary Get a test result.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/results/4
     * @param {number} resultId For example, 4 for the following URL: https://app.autify.com/projects/1/results/4
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    describeResult(
      projectId: number,
      resultId: number,
      options?: any
    ): AxiosPromise<DescribeResult200Response> {
      return localVarFp
        .describeResult(projectId, resultId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List test results.
     * @summary List test results.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/results
     * @param {number} [page] The number of page returns.
     * @param {number} [perPage] The number of items returns. Default number is 30 and up to a maximum of 100
     * @param {number} [testPlanId] Test plan ID used to filter results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResults(
      projectId: number,
      page?: number,
      perPage?: number,
      testPlanId?: number,
      options?: any
    ): AxiosPromise<Array<TestPlanResult>> {
      return localVarFp
        .listResults(projectId, page, perPage, testPlanId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ResultApi - object-oriented interface
 * @export
 * @class ResultApi
 * @extends {BaseAPI}
 */
export class ResultApi extends BaseAPI {
  /**
   * Get a test result.
   * @summary Get a test result.
   * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/results/4
   * @param {number} resultId For example, 4 for the following URL: https://app.autify.com/projects/1/results/4
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResultApi
   */
  public describeResult(
    projectId: number,
    resultId: number,
    options?: AxiosRequestConfig
  ) {
    return ResultApiFp(this.configuration)
      .describeResult(projectId, resultId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * List test results.
   * @summary List test results.
   * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/results
   * @param {number} [page] The number of page returns.
   * @param {number} [perPage] The number of items returns. Default number is 30 and up to a maximum of 100
   * @param {number} [testPlanId] Test plan ID used to filter results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResultApi
   */
  public listResults(
    projectId: number,
    page?: number,
    perPage?: number,
    testPlanId?: number,
    options?: AxiosRequestConfig
  ) {
    return ResultApiFp(this.configuration)
      .listResults(projectId, page, perPage, testPlanId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ScenarioApi - axios parameter creator
 * @export
 */
export const ScenarioApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Get a scenario.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios/2
     * @param {number} scenarioId For example, 2 for the following URL: https://app.autify.com/projects/1/scenarios/2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    describeScenario: async (
      projectId: number,
      scenarioId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("describeScenario", "projectId", projectId);
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists("describeScenario", "scenarioId", scenarioId);
      const localVarPath = `/projects/{project_id}/scenarios/{scenario_id}`
        .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
        .replace(`{${"scenario_id"}}`, encodeURIComponent(String(scenarioId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * You can execute any scenarios in your workspace using any execution environments (which is called \"capabilities\" here).
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
     * @param {ExecuteScenariosRequest} executeScenariosRequest The scenarios and settings to execute
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeScenarios: async (
      projectId: number,
      executeScenariosRequest: ExecuteScenariosRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("executeScenarios", "projectId", projectId);
      // verify required parameter 'executeScenariosRequest' is not null or undefined
      assertParamExists(
        "executeScenarios",
        "executeScenariosRequest",
        executeScenariosRequest
      );
      const localVarPath = `/projects/{project_id}/execute_scenarios`.replace(
        `{${"project_id"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        executeScenariosRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List scenarios.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
     * @param {number} [page] The number of page returns.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listScenarios: async (
      projectId: number,
      page?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("listScenarios", "projectId", projectId);
      const localVarPath = `/projects/{project_id}/scenarios`.replace(
        `{${"project_id"}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ScenarioApi - functional programming interface
 * @export
 */
export const ScenarioApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ScenarioApiAxiosParamCreator(configuration);
  return {
    /**
     * Get a scenario.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios/2
     * @param {number} scenarioId For example, 2 for the following URL: https://app.autify.com/projects/1/scenarios/2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async describeScenario(
      projectId: number,
      scenarioId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.describeScenario(
          projectId,
          scenarioId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * You can execute any scenarios in your workspace using any execution environments (which is called \"capabilities\" here).
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
     * @param {ExecuteScenariosRequest} executeScenariosRequest The scenarios and settings to execute
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async executeScenarios(
      projectId: number,
      executeScenariosRequest: ExecuteScenariosRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ExecuteScenariosResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.executeScenarios(
          projectId,
          executeScenariosRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * List scenarios.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
     * @param {number} [page] The number of page returns.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listScenarios(
      projectId: number,
      page?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Scenario>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listScenarios(
        projectId,
        page,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ScenarioApi - factory interface
 * @export
 */
export const ScenarioApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ScenarioApiFp(configuration);
  return {
    /**
     * Get a scenario.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios/2
     * @param {number} scenarioId For example, 2 for the following URL: https://app.autify.com/projects/1/scenarios/2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    describeScenario(
      projectId: number,
      scenarioId: number,
      options?: any
    ): AxiosPromise<Scenario> {
      return localVarFp
        .describeScenario(projectId, scenarioId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * You can execute any scenarios in your workspace using any execution environments (which is called \"capabilities\" here).
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
     * @param {ExecuteScenariosRequest} executeScenariosRequest The scenarios and settings to execute
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeScenarios(
      projectId: number,
      executeScenariosRequest: ExecuteScenariosRequest,
      options?: any
    ): AxiosPromise<ExecuteScenariosResult> {
      return localVarFp
        .executeScenarios(projectId, executeScenariosRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List scenarios.
     * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
     * @param {number} [page] The number of page returns.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listScenarios(
      projectId: number,
      page?: number,
      options?: any
    ): AxiosPromise<Array<Scenario>> {
      return localVarFp
        .listScenarios(projectId, page, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ScenarioApi - object-oriented interface
 * @export
 * @class ScenarioApi
 * @extends {BaseAPI}
 */
export class ScenarioApi extends BaseAPI {
  /**
   * Get a scenario.
   * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios/2
   * @param {number} scenarioId For example, 2 for the following URL: https://app.autify.com/projects/1/scenarios/2
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public describeScenario(
    projectId: number,
    scenarioId: number,
    options?: AxiosRequestConfig
  ) {
    return ScenarioApiFp(this.configuration)
      .describeScenario(projectId, scenarioId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * You can execute any scenarios in your workspace using any execution environments (which is called \"capabilities\" here).
   * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
   * @param {ExecuteScenariosRequest} executeScenariosRequest The scenarios and settings to execute
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public executeScenarios(
    projectId: number,
    executeScenariosRequest: ExecuteScenariosRequest,
    options?: AxiosRequestConfig
  ) {
    return ScenarioApiFp(this.configuration)
      .executeScenarios(projectId, executeScenariosRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * List scenarios.
   * @param {number} projectId For example, 1 for the following URL: https://app.autify.com/projects/1/scenarios
   * @param {number} [page] The number of page returns.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public listScenarios(
    projectId: number,
    page?: number,
    options?: AxiosRequestConfig
  ) {
    return ScenarioApiFp(this.configuration)
      .listScenarios(projectId, page, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ScheduleApi - axios parameter creator
 * @export
 */
export const ScheduleApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * \"Schedule\" is called as \"Test Plan\" now.\\ If you want to run a test plan, use this endpoint.
     * @summary Run a test plan.
     * @param {number} scheduleId For example, 3 for the following URL: https://app.autify.com/projects/1/test_plans/3
     * @param {ExecuteScheduleRequest} [executeScheduleRequest] The options to execute a test plan.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSchedule: async (
      scheduleId: number,
      executeScheduleRequest?: ExecuteScheduleRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'scheduleId' is not null or undefined
      assertParamExists("executeSchedule", "scheduleId", scheduleId);
      const localVarPath = `/schedules/{schedule_id}`.replace(
        `{${"schedule_id"}}`,
        encodeURIComponent(String(scheduleId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        executeScheduleRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ScheduleApi - functional programming interface
 * @export
 */
export const ScheduleApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ScheduleApiAxiosParamCreator(configuration);
  return {
    /**
     * \"Schedule\" is called as \"Test Plan\" now.\\ If you want to run a test plan, use this endpoint.
     * @summary Run a test plan.
     * @param {number} scheduleId For example, 3 for the following URL: https://app.autify.com/projects/1/test_plans/3
     * @param {ExecuteScheduleRequest} [executeScheduleRequest] The options to execute a test plan.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async executeSchedule(
      scheduleId: number,
      executeScheduleRequest?: ExecuteScheduleRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ExecuteSchedule200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.executeSchedule(
        scheduleId,
        executeScheduleRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ScheduleApi - factory interface
 * @export
 */
export const ScheduleApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ScheduleApiFp(configuration);
  return {
    /**
     * \"Schedule\" is called as \"Test Plan\" now.\\ If you want to run a test plan, use this endpoint.
     * @summary Run a test plan.
     * @param {number} scheduleId For example, 3 for the following URL: https://app.autify.com/projects/1/test_plans/3
     * @param {ExecuteScheduleRequest} [executeScheduleRequest] The options to execute a test plan.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSchedule(
      scheduleId: number,
      executeScheduleRequest?: ExecuteScheduleRequest,
      options?: any
    ): AxiosPromise<ExecuteSchedule200Response> {
      return localVarFp
        .executeSchedule(scheduleId, executeScheduleRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ScheduleApi - object-oriented interface
 * @export
 * @class ScheduleApi
 * @extends {BaseAPI}
 */
export class ScheduleApi extends BaseAPI {
  /**
   * \"Schedule\" is called as \"Test Plan\" now.\\ If you want to run a test plan, use this endpoint.
   * @summary Run a test plan.
   * @param {number} scheduleId For example, 3 for the following URL: https://app.autify.com/projects/1/test_plans/3
   * @param {ExecuteScheduleRequest} [executeScheduleRequest] The options to execute a test plan.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScheduleApi
   */
  public executeSchedule(
    scheduleId: number,
    executeScheduleRequest?: ExecuteScheduleRequest,
    options?: AxiosRequestConfig
  ) {
    return ScheduleApiFp(this.configuration)
      .executeSchedule(scheduleId, executeScheduleRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UrlReplacementApi - axios parameter creator
 * @export
 */
export const UrlReplacementApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Create a new url replacement for the test plan
     * @param {number} testPlanId For example, 15 for the following URL: https://app.autify.com/projects/1/test_plans/15
     * @param {CreateUrlReplacementRequest} createUrlReplacementRequest The url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUrlReplacement: async (
      testPlanId: number,
      createUrlReplacementRequest: CreateUrlReplacementRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'testPlanId' is not null or undefined
      assertParamExists("createUrlReplacement", "testPlanId", testPlanId);
      // verify required parameter 'createUrlReplacementRequest' is not null or undefined
      assertParamExists(
        "createUrlReplacement",
        "createUrlReplacementRequest",
        createUrlReplacementRequest
      );
      const localVarPath =
        `/test_plans/{test_plan_id}/url_replacements`.replace(
          `{${"test_plan_id"}}`,
          encodeURIComponent(String(testPlanId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createUrlReplacementRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete a url replacement for the test plan
     * @param {number} testPlanId For example, 15 for the following URL: https://app.autify.com/projects/1/test_plans/15
     * @param {number} urlReplacementId url_replacement id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUrlReplacement: async (
      testPlanId: number,
      urlReplacementId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'testPlanId' is not null or undefined
      assertParamExists("deleteUrlReplacement", "testPlanId", testPlanId);
      // verify required parameter 'urlReplacementId' is not null or undefined
      assertParamExists(
        "deleteUrlReplacement",
        "urlReplacementId",
        urlReplacementId
      );
      const localVarPath =
        `/test_plans/{test_plan_id}/url_replacements/{url_replacement_id}`
          .replace(
            `{${"test_plan_id"}}`,
            encodeURIComponent(String(testPlanId))
          )
          .replace(
            `{${"url_replacement_id"}}`,
            encodeURIComponent(String(urlReplacementId))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List url replacements for the test plan
     * @param {number} testPlanId For example, 15 for the following URL: https://app.autify.com/projects/1/test_plans/15
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUrlReplacements: async (
      testPlanId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'testPlanId' is not null or undefined
      assertParamExists("listUrlReplacements", "testPlanId", testPlanId);
      const localVarPath =
        `/test_plans/{test_plan_id}/url_replacements`.replace(
          `{${"test_plan_id"}}`,
          encodeURIComponent(String(testPlanId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update a url replacement for the test plan
     * @param {number} testPlanId For example, 15 for the following URL: https://app.autify.com/projects/1/test_plans/15
     * @param {number} urlReplacementId url_replacement id
     * @param {UpdateUrlReplacementRequest} updateUrlReplacementRequest The url to replace. Either pattern_url or replacement_url is required.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUrlReplacement: async (
      testPlanId: number,
      urlReplacementId: number,
      updateUrlReplacementRequest: UpdateUrlReplacementRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'testPlanId' is not null or undefined
      assertParamExists("updateUrlReplacement", "testPlanId", testPlanId);
      // verify required parameter 'urlReplacementId' is not null or undefined
      assertParamExists(
        "updateUrlReplacement",
        "urlReplacementId",
        urlReplacementId
      );
      // verify required parameter 'updateUrlReplacementRequest' is not null or undefined
      assertParamExists(
        "updateUrlReplacement",
        "updateUrlReplacementRequest",
        updateUrlReplacementRequest
      );
      const localVarPath =
        `/test_plans/{test_plan_id}/url_replacements/{url_replacement_id}`
          .replace(
            `{${"test_plan_id"}}`,
            encodeURIComponent(String(testPlanId))
          )
          .replace(
            `{${"url_replacement_id"}}`,
            encodeURIComponent(String(urlReplacementId))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUrlReplacementRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UrlReplacementApi - functional programming interface
 * @export
 */
export const UrlReplacementApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    UrlReplacementApiAxiosParamCreator(configuration);
  return {
    /**
     * Create a new url replacement for the test plan
     * @param {number} testPlanId For example, 15 for the following URL: https://app.autify.com/projects/1/test_plans/15
     * @param {CreateUrlReplacementRequest} createUrlReplacementRequest The url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUrlReplacement(
      testPlanId: number,
      createUrlReplacementRequest: CreateUrlReplacementRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlReplacement>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createUrlReplacement(
          testPlanId,
          createUrlReplacementRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Delete a url replacement for the test plan
     * @param {number} testPlanId For example, 15 for the following URL: https://app.autify.com/projects/1/test_plans/15
     * @param {number} urlReplacementId url_replacement id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUrlReplacement(
      testPlanId: number,
      urlReplacementId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteUrlReplacement(
          testPlanId,
          urlReplacementId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * List url replacements for the test plan
     * @param {number} testPlanId For example, 15 for the following URL: https://app.autify.com/projects/1/test_plans/15
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listUrlReplacements(
      testPlanId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<UrlReplacement>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listUrlReplacements(
          testPlanId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Update a url replacement for the test plan
     * @param {number} testPlanId For example, 15 for the following URL: https://app.autify.com/projects/1/test_plans/15
     * @param {number} urlReplacementId url_replacement id
     * @param {UpdateUrlReplacementRequest} updateUrlReplacementRequest The url to replace. Either pattern_url or replacement_url is required.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUrlReplacement(
      testPlanId: number,
      urlReplacementId: number,
      updateUrlReplacementRequest: UpdateUrlReplacementRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlReplacement>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateUrlReplacement(
          testPlanId,
          urlReplacementId,
          updateUrlReplacementRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UrlReplacementApi - factory interface
 * @export
 */
export const UrlReplacementApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UrlReplacementApiFp(configuration);
  return {
    /**
     * Create a new url replacement for the test plan
     * @param {number} testPlanId For example, 15 for the following URL: https://app.autify.com/projects/1/test_plans/15
     * @param {CreateUrlReplacementRequest} createUrlReplacementRequest The url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUrlReplacement(
      testPlanId: number,
      createUrlReplacementRequest: CreateUrlReplacementRequest,
      options?: any
    ): AxiosPromise<UrlReplacement> {
      return localVarFp
        .createUrlReplacement(testPlanId, createUrlReplacementRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete a url replacement for the test plan
     * @param {number} testPlanId For example, 15 for the following URL: https://app.autify.com/projects/1/test_plans/15
     * @param {number} urlReplacementId url_replacement id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUrlReplacement(
      testPlanId: number,
      urlReplacementId: number,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .deleteUrlReplacement(testPlanId, urlReplacementId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List url replacements for the test plan
     * @param {number} testPlanId For example, 15 for the following URL: https://app.autify.com/projects/1/test_plans/15
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUrlReplacements(
      testPlanId: number,
      options?: any
    ): AxiosPromise<Array<UrlReplacement>> {
      return localVarFp
        .listUrlReplacements(testPlanId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update a url replacement for the test plan
     * @param {number} testPlanId For example, 15 for the following URL: https://app.autify.com/projects/1/test_plans/15
     * @param {number} urlReplacementId url_replacement id
     * @param {UpdateUrlReplacementRequest} updateUrlReplacementRequest The url to replace. Either pattern_url or replacement_url is required.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUrlReplacement(
      testPlanId: number,
      urlReplacementId: number,
      updateUrlReplacementRequest: UpdateUrlReplacementRequest,
      options?: any
    ): AxiosPromise<UrlReplacement> {
      return localVarFp
        .updateUrlReplacement(
          testPlanId,
          urlReplacementId,
          updateUrlReplacementRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UrlReplacementApi - object-oriented interface
 * @export
 * @class UrlReplacementApi
 * @extends {BaseAPI}
 */
export class UrlReplacementApi extends BaseAPI {
  /**
   * Create a new url replacement for the test plan
   * @param {number} testPlanId For example, 15 for the following URL: https://app.autify.com/projects/1/test_plans/15
   * @param {CreateUrlReplacementRequest} createUrlReplacementRequest The url to replace
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrlReplacementApi
   */
  public createUrlReplacement(
    testPlanId: number,
    createUrlReplacementRequest: CreateUrlReplacementRequest,
    options?: AxiosRequestConfig
  ) {
    return UrlReplacementApiFp(this.configuration)
      .createUrlReplacement(testPlanId, createUrlReplacementRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete a url replacement for the test plan
   * @param {number} testPlanId For example, 15 for the following URL: https://app.autify.com/projects/1/test_plans/15
   * @param {number} urlReplacementId url_replacement id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrlReplacementApi
   */
  public deleteUrlReplacement(
    testPlanId: number,
    urlReplacementId: number,
    options?: AxiosRequestConfig
  ) {
    return UrlReplacementApiFp(this.configuration)
      .deleteUrlReplacement(testPlanId, urlReplacementId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * List url replacements for the test plan
   * @param {number} testPlanId For example, 15 for the following URL: https://app.autify.com/projects/1/test_plans/15
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrlReplacementApi
   */
  public listUrlReplacements(testPlanId: number, options?: AxiosRequestConfig) {
    return UrlReplacementApiFp(this.configuration)
      .listUrlReplacements(testPlanId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update a url replacement for the test plan
   * @param {number} testPlanId For example, 15 for the following URL: https://app.autify.com/projects/1/test_plans/15
   * @param {number} urlReplacementId url_replacement id
   * @param {UpdateUrlReplacementRequest} updateUrlReplacementRequest The url to replace. Either pattern_url or replacement_url is required.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrlReplacementApi
   */
  public updateUrlReplacement(
    testPlanId: number,
    urlReplacementId: number,
    updateUrlReplacementRequest: UpdateUrlReplacementRequest,
    options?: AxiosRequestConfig
  ) {
    return UrlReplacementApiFp(this.configuration)
      .updateUrlReplacement(
        testPlanId,
        urlReplacementId,
        updateUrlReplacementRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
